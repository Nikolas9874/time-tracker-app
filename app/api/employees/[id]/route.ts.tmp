import { NextRequest, NextResponse } from 'next/server'
import path from 'path'
import fs from 'fs'

// Функция для загрузки данных сотрудников из файла
const getEmployeesData = () => {
  try {
    const dataFilePath = path.join(process.cwd(), 'employees_data.json')
    
    if (fs.existsSync(dataFilePath)) {
      const data = JSON.parse(fs.readFileSync(dataFilePath, 'utf8'))
      if (Array.isArray(data)) {
        return data.map((emp) => ({
          ...emp,
          createdAt: new Date(emp.createdAt),
          updatedAt: new Date(emp.updatedAt)
        }))
      }
    }
  } catch (error) {
    console.error('Ошибка чтения данных сотрудников:', error)
  }
  
  return []
}

// Функция для сохранения данных в файл
const saveEmployeesToFile = (employees: Record<string, any>[]) => {
  try {
    const dataFilePath = path.join(process.cwd(), 'employees_data.json')
    fs.writeFileSync(dataFilePath, JSON.stringify(employees, null, 2), 'utf8')
    console.log(`Сохранено ${employees.length} сотрудников в файл`)
    return true
  } catch (error) {
    console.error('Ошибка сохранения сотрудников в файл:', error)
    return false
  }
}

// GET /api/employees/[id] - получить сотрудника по ID
export async function GET(request: NextRequest, context: any) {
  try {
    const { id } = context.params
    console.log(`Запрос сотрудника по ID: ${id}`)
    
    const employees = getEmployeesData()
    const employee = employees.find(emp => emp.id === id)
    
    if (!employee) {
      return NextResponse.json(
        { error: 'Сотрудник не найден' },
        { status: 404 }
      )
    }
    
    return NextResponse.json(employee)
  } catch (error) {
    console.error('Error fetching employee:', error)
    return NextResponse.json(
      { error: 'Не удалось получить сотрудника' },
      { status: 500 }
    )
  }
}

// PUT /api/employees/[id] - обновить сотрудника
export async function PUT(request: NextRequest, context: any) {
  try {
    const { id } = context.params
    console.log(`Обработка PUT запроса для сотрудника с ID: ${id}`)
    
    const body = await request.json()
    console.log('Тело запроса:', body)
    
    const { name, position } = body
    
    if (!name || !position) {
      return NextResponse.json(
        { error: 'Необходимо указать имя и должность' },
        { status: 400 }
      )
    }
    
    // Загружаем текущих сотрудников
    const employees = getEmployeesData()
    const employeeIndex = employees.findIndex(emp => emp.id === id)
    
    if (employeeIndex === -1) {
      console.log(`Сотрудник с ID ${id} не найден`)
      return NextResponse.json(
        { error: 'Сотрудник не найден' },
        { status: 404 }
      )
    }
    
    // Обновляем данные сотрудника
    const updatedEmployee = {
      ...employees[employeeIndex],
      name: name.trim(),
      position: position.trim(),
      updatedAt: new Date()
    }
    
    // Заменяем сотрудника в массиве
    employees[employeeIndex] = updatedEmployee
    
    // Сохраняем обновленные данные
    if (saveEmployeesToFile(employees)) {
      console.log(`Сотрудник с ID ${id} успешно обновлен`)
      return NextResponse.json(updatedEmployee)
    } else {
      throw new Error('Не удалось сохранить данные')
    }
  } catch (error) {
    console.error('Error updating employee:', error)
    return NextResponse.json(
      { error: 'Не удалось обновить сотрудника' },
      { status: 500 }
    )
  }
}

// PATCH /api/employees/[id] - обновить сотрудника (частичное обновление)
export async function PATCH(request: NextRequest, context: any) {
  try {
    const { id } = context.params
    console.log(`Обработка PATCH запроса для сотрудника с ID: ${id}`)
    
    const body = await request.json()
    console.log('Тело запроса:', body)
    
    const { name, position } = body
    
    if (!name && !position) {
      return NextResponse.json(
        { error: 'Необходимо указать имя или должность' },
        { status: 400 }
      )
    }
    
    // Загружаем текущих сотрудников
    const employees = getEmployeesData()
    const employeeIndex = employees.findIndex(emp => emp.id === id)
    
    if (employeeIndex === -1) {
      console.log(`Сотрудник с ID ${id} не найден`)
      return NextResponse.json(
        { error: 'Сотрудник не найден' },
        { status: 404 }
      )
    }
    
    // Обновляем данные сотрудника
    const updatedEmployee = {
      ...employees[employeeIndex],
      ...(name && { name: name.trim() }),
      ...(position && { position: position.trim() }),
      updatedAt: new Date()
    }
    
    // Заменяем сотрудника в массиве
    employees[employeeIndex] = updatedEmployee
    
    // Сохраняем обновленные данные
    if (saveEmployeesToFile(employees)) {
      console.log(`Сотрудник с ID ${id} успешно обновлен через PATCH`)
      return NextResponse.json(updatedEmployee)
    } else {
      throw new Error('Не удалось сохранить данные')
    }
  } catch (error) {
    console.error('Error updating employee via PATCH:', error)
    return NextResponse.json(
      { error: 'Не удалось обновить сотрудника' },
      { status: 500 }
    )
  }
}

// DELETE /api/employees/[id] - удалить сотрудника
export async function DELETE(request: NextRequest, context: any) {
  try {
    const { id } = context.params
    console.log(`Запрос на удаление сотрудника с ID: ${id}`)
    
    // Загружаем текущих сотрудников
    const employees = getEmployeesData()
    const employeeIndex = employees.findIndex(emp => emp.id === id)
    
    if (employeeIndex === -1) {
      console.log(`Сотрудник с ID ${id} не найден`)
      return NextResponse.json(
        { error: 'Сотрудник не найден' },
        { status: 404 }
      )
    }
    
    // Удаляем сотрудника из массива
    const deletedEmployee = employees.splice(employeeIndex, 1)[0]
    console.log(`Удален сотрудник: ${deletedEmployee.name}, id: ${deletedEmployee.id}`)
    
    // Сохраняем обновленные данные
    if (saveEmployeesToFile(employees)) {
      return NextResponse.json({ 
        success: true, 
        message: 'Сотрудник успешно удален',
        id: id
      })
    } else {
      throw new Error('Не удалось сохранить данные')
    }
  } catch (error) {
    console.error('Error deleting employee:', error)
    return NextResponse.json(
      { error: 'Не удалось удалить сотрудника' },
      { status: 500 }
    )
  }
} 