// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Employee {
  id         String    @id @default(uuid())
  name       String
  email      String?
  position   String?
  department String?
  workDays   WorkDay[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model WorkDay {
  id          String   @id @default(uuid())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date        DateTime
  dayType     String   // WORK_DAY, DAY_OFF, VACATION, SICK_LEAVE, ABSENCE, UNPAID_LEAVE
  timeEntry   String?  // Для хранения времени (startTime, endTime, lunchStartTime, lunchEndTime)
  tasks       String?  // Для хранения массива задач JSON
  connections String?  // Для хранения массива связей JSON
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([employeeId, date])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  password      String
  role          UserRole  @default(OPERATOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tickets       Ticket[]  @relation("AssignedTickets")
  messages      Message[]
}

model Subscriber {
  id            String    @id @default(cuid())
  name          String
  phone         String?
  email         String?
  address       String?
  telegramId    String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tickets       Ticket[]
  messages      Message[]
}

model Ticket {
  id            String    @id @default(cuid())
  title         String
  description   String
  status        TicketStatus @default(OPEN)
  priority      Priority     @default(MEDIUM)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  subscriber    Subscriber @relation(fields: [subscriberId], references: [id])
  subscriberId  String
  assignedTo    User?     @relation("AssignedTickets", fields: [assignedToId], references: [id])
  assignedToId  String?
  messages      Message[]
}

model Message {
  id            String    @id @default(cuid())
  content       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isFromAI      Boolean   @default(false)
  ticket        Ticket    @relation(fields: [ticketId], references: [id])
  ticketId      String
  user          User?     @relation(fields: [userId], references: [id])
  userId        String?
  subscriber    Subscriber @relation(fields: [subscriberId], references: [id])
  subscriberId  String
}

enum UserRole {
  ADMIN
  OPERATOR
  MANAGER
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
} 